{"ast":null,"code":"const COHORT_NAME = '2301-ftb-et-web-pt';\nexport const BASE_URL = `https://strangers-things.herokuapp.com/api/${COHORT_NAME}`;\nexport const registerUser = async user => {\n  console.log(user);\n  try {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n    const result = await response.json();\n    // You can log ▲▲▲ the result\n    // here ▼▼▼ to view the json object before returning it\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const fetchPosts = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts`);\n    const result = await response.json();\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const login = async user => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const makePost = async (token, post) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n  }\n};","map":{"version":3,"names":["COHORT_NAME","BASE_URL","registerUser","user","console","log","response","fetch","method","headers","body","JSON","stringify","result","json","err","error","fetchPosts","login","makePost","token","post"],"sources":["/Users/kari/Library/Mobile Documents/com~apple~CloudDocs/Code/Coding Bootcamp/Projects /StrangerThings/src/ajax-requests/index.js"],"sourcesContent":["const COHORT_NAME = '2301-ftb-et-web-pt'\nexport const BASE_URL = `https://strangers-things.herokuapp.com/api/${COHORT_NAME}`\n\n\n\n\nexport const registerUser = async (user) => {\nconsole.log(user)\n    try {\n        const response = await fetch(\n            `${BASE_URL}/users/register`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                user\n\n            })\n        });\n        const result = await response.json();\n        // You can log ▲▲▲ the result\n        // here ▼▼▼ to view the json object before returning it\n        console.log(result)\n        return result\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport const fetchPosts = async () => {\n    try {\n        const response = await fetch(`${BASE_URL}/posts`)\n\n        const result = await response.json();\n        console.log(result);\n        return result\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport const login = async (user) => {\n\n    try {\n        const response = await fetch(`${BASE_URL}/users/login`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n               user\n            })\n        });\n        const result = await response.json();\n        console.log(result);\n        return result\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport const makePost = async (token, post) => {\n\n    try {\n        const response = await fetch(`${BASE_URL}/posts`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n               post\n            })\n        });\n        const result = await response.json();\n        console.log(result);\n        return result\n    } catch (err) {\n        console.error(err);\n    }\n}"],"mappings":"AAAA,MAAMA,WAAW,GAAG,oBAAoB;AACxC,OAAO,MAAMC,QAAQ,GAAI,8CAA6CD,WAAY,EAAC;AAKnF,OAAO,MAAME,YAAY,GAAG,MAAOC,IAAI,IAAK;EAC5CC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;EACb,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CACvB,GAAEN,QAAS,iBAAgB,EAAE;MAC9BO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBT;MAEJ,CAAC;IACL,CAAC,CAAC;IACF,MAAMU,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;IACpC;IACA;IACAV,OAAO,CAACC,GAAG,CAACQ,MAAM,CAAC;IACnB,OAAOA,MAAM;EACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;IACVX,OAAO,CAACY,KAAK,CAACD,GAAG,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,QAAS,QAAO,CAAC;IAEjD,MAAMY,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;IACpCV,OAAO,CAACC,GAAG,CAACQ,MAAM,CAAC;IACnB,OAAOA,MAAM;EACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;IACVX,OAAO,CAACY,KAAK,CAACD,GAAG,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMG,KAAK,GAAG,MAAOf,IAAI,IAAK;EAEjC,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,QAAS,cAAa,EAAE;MACpDO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAClBT;MACH,CAAC;IACL,CAAC,CAAC;IACF,MAAMU,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;IACpCV,OAAO,CAACC,GAAG,CAACQ,MAAM,CAAC;IACnB,OAAOA,MAAM;EACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;IACVX,OAAO,CAACY,KAAK,CAACD,GAAG,CAAC;EACtB;AACJ,CAAC;AAED,OAAO,MAAMI,QAAQ,GAAG,MAAAA,CAAOC,KAAK,EAAEC,IAAI,KAAK;EAE3C,IAAI;IACA,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEN,QAAS,QAAO,EAAE;MAC9CO,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,UAASW,KAAM;MACrC,CAAC;MACDV,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAClBS;MACH,CAAC;IACL,CAAC,CAAC;IACF,MAAMR,MAAM,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;IACpCV,OAAO,CAACC,GAAG,CAACQ,MAAM,CAAC;IACnB,OAAOA,MAAM;EACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;IACVX,OAAO,CAACY,KAAK,CAACD,GAAG,CAAC;EACtB;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}