{"ast":null,"code":"const COHORT_NAME = '2301-ftb-et-web-pt';\nexport const BASE_URL = `https://strangers-things.herokuapp.com/api/${COHORT_NAME}`;\nexport const registerUser = async user => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/register`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n    const result = await response.json();\n    // You can log ▲▲▲ the result\n    // here ▼▼▼ to view the json object before returning it\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const fetchPosts = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts`);\n    const result = await response.json();\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const login = async user => {\n  try {\n    const response = await fetch(`${BASE_URL}/users/login`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const makePost = async (token, post) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts`, {\n      method: \"POST\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const updatePost = async (postId, token, updatedPost) => {\n  try {\n    const response = await fetch(`${BASE_URL}/posts/${{\n      postId\n    }}`, {\n      method: \"PATCH\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        post: updatedPost\n      })\n    });\n    const result = await response.json();\n    console.log(result);\n    return result;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const myData = async token => {\n  try {\n    const res = await fetch(`${BASE_URL}/users/me`, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n      }\n    });\n    const data = await res.json();\n    console.log(data);\n    setPosts(results.data.posts);\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"names":["COHORT_NAME","BASE_URL","registerUser","user","response","fetch","method","headers","body","JSON","stringify","result","json","console","log","err","error","fetchPosts","login","makePost","token","post","updatePost","postId","updatedPost","myData","res","data","setPosts","results","posts"],"sources":["/Users/kari/Library/Mobile Documents/com~apple~CloudDocs/Code/Coding Bootcamp/Projects /StrangerThings/src/ajax-requests/index.js"],"sourcesContent":["const COHORT_NAME = '2301-ftb-et-web-pt'\nexport const BASE_URL = `https://strangers-things.herokuapp.com/api/${COHORT_NAME}`\n\n\n\n\nexport const registerUser = async (user) => {\n\n    try {\n        const response = await fetch(`${BASE_URL}/users/register`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                user\n\n            }),\n        });\n        const result = await response.json();\n        // You can log ▲▲▲ the result\n        // here ▼▼▼ to view the json object before returning it\n        console.log(result)\n        return result\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport const fetchPosts = async () => {\n    try {\n        const response = await fetch(`${BASE_URL}/posts`)\n\n        const result = await response.json();\n        console.log(result);\n        return result\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport const login = async (user) => {\n\n    try {\n        const response = await fetch(`${BASE_URL}/users/login`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n               user,\n            })\n        });\n        const result = await response.json();\n        console.log(result);\n        return result\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport const makePost = async (token, post) => {\n\n    try {\n        const response = await fetch(`${BASE_URL}/posts`, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n               post\n            })\n        });\n        const result = await response.json();\n        console.log(result);\n        return result\n    } catch (err) {\n        console.error(err);\n    }\n}\n\nexport const updatePost = async (postId, token, updatedPost) => {\n    try {\n      \n        const response = await fetch(`${BASE_URL}/posts/${{postId}}`, {\n            method: \"PATCH\",\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                post : updatedPost,\n                \n            })\n        });\n        const result = await response.json();\n        console.log(result);\n        return result\n    } catch (err) {\n        console.error(err);\n    }\n}\n\n\n\nexport const myData = async (token) => {\n    try {\n        const res = await fetch(`${BASE_URL}/users/me`, {\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer ${token}`\n            }\n        });\n        const data = await res.json();\n        console.log(data)\n        setPosts(results.data.posts);\n\n    } catch (error) {\n        console.log(error)\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}